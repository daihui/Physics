/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lightseconddataanalyzer;

import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author 戴辉
 */
public class DPSJFrame extends javax.swing.JFrame {

    /**
     * @return the APD1DelayTime
     */
    public static int getAPD1DelayTime() {
        return APD1DelayTime;
    }

    /**
     * @param aAPD1DelayTime the APD1DelayTime to set
     */
    public static void setAPD1DelayTime(int aAPD1DelayTime) {
        APD1DelayTime = aAPD1DelayTime;
    }

    /**
     * @return the APD2DelayTime
     */
    public static int getAPD2DelayTime() {
        return APD2DelayTime;
    }

    /**
     * @param aAPD2DelayTime the APD2DelayTime to set
     */
    public static void setAPD2DelayTime(int aAPD2DelayTime) {
        APD2DelayTime = aAPD2DelayTime;
    }

    /**
     * @return the GateTime
     */
    public static int getGateTime() {
        return GateTime;
    }

    /**
     * @param aGateTime the GateTime to set
     */
    public static void setGateTime(int aGateTime) {
        GateTime = aGateTime;
    }

    /**
     * @return the syncRound
     */
    public static int getSyncRound() {
        return syncRound;
    }

    /**
     * @param aSyncRound the syncRound to set
     */
    public static void setSyncRound(int aSyncRound) {
        syncRound = aSyncRound;
    }
    
        public static int getGPSStartTime() {
        return RoundStart;
    }

    /**
     * @param GPSStartTime the GPSStartTime to set
     */
    public static void setGPSStartTime(int GPSStartTime) {
        RoundStart = GPSStartTime;
    }

    /**
     * @return the ProcessTime
     */
    public static int getProcessTime() {
        return RoundEnd;
    }

    /**
     * @param ProcessTime the ProcessTime to set
     */
    public static void setProcessTime(int ProcessTime) {
        RoundEnd = ProcessTime;
    }


    private final File DataFile = new File("G:\\DPS数据处理\\DPS实验数据");
    private final String FileType = "dat";
    private static int APD1DelayTime;
    private static int APD2DelayTime;
    private static int GateTime;
    private static int syncRound;
    private File SendTimeDataFile;
    private File ReceiveTimeDataFile;
    private File SendRandomDataFile;
    private File ReceiveRandomDataFile;
    private static int RoundStart = 0;
    private static int RoundEnd = 7000;

    /**
     * Creates new form DPSJFrame
     */
    public DPSJFrame() {

        initComponents();
        System.setOut(new GUIPrintStream(System.out, ResultPrint));
    }

    /**
     * @return the GPSStartTime
     */

    public class GUIPrintStream extends PrintStream {

        private JTextComponent component;
        private StringBuffer sb = new StringBuffer();

        public GUIPrintStream(OutputStream out, JTextComponent component) {
            super(out);
            this.component = component;
        }

        /**
         * 重写write()方法，将输出信息填充到GUI组件。
         *
         * @param buf
         * @param off
         * @param len
         */
        @Override
        public void write(byte[] buf, int off, int len) {
            final String message = new String(buf, off, len);
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    sb.append(message);
                    component.setText(sb.toString());
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        APD1Delay = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        APD2Delay = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TimeGate = new javax.swing.JTextField();
        DataProcess = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultPrint = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        SendTimeData = new javax.swing.JButton();
        SendRandomData = new javax.swing.JButton();
        ReceiveTimeData = new javax.swing.JButton();
        ReceiveRandomData = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TimeSetting = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        SyncRoundText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        roundStartTxt = new javax.swing.JTextField();
        roundEndTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel1.setText("Click to Choose Data File:");

        APD1Delay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                APD1DelayActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel5.setText("APD1 Delay:");

        jLabel6.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel6.setText("APD2 Delay:");

        APD2Delay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                APD2DelayActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel7.setText("TimeGate:");

        TimeGate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeGateActionPerformed(evt);
            }
        });

        DataProcess.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        DataProcess.setText("Data Processing");
        DataProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataProcessActionPerformed(evt);
            }
        });

        ResultPrint.setColumns(20);
        ResultPrint.setRows(5);
        jScrollPane1.setViewportView(ResultPrint);

        jLabel8.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel8.setText("Result:");

        jLabel9.setFont(new java.awt.Font("Century", 1, 24)); // NOI18N
        jLabel9.setText("RRDPS-QKD Data Processing ");

        SendTimeData.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        SendTimeData.setText("SendTimeData");
        SendTimeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendTimeDataActionPerformed(evt);
            }
        });

        SendRandomData.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        SendRandomData.setText("SendRandomData");
        SendRandomData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendRandomDataActionPerformed(evt);
            }
        });

        ReceiveTimeData.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        ReceiveTimeData.setText("ReceiveTimeData");
        ReceiveTimeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveTimeDataActionPerformed(evt);
            }
        });

        ReceiveRandomData.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        ReceiveRandomData.setText("ReceiveRandomData");
        ReceiveRandomData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveRandomDataActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        jLabel2.setText("Time Setting:");

        TimeSetting.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        TimeSetting.setText("Set Time");
        TimeSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeSettingActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel3.setText("SyncRound:");

        jLabel4.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel4.setText("RoundStart:");

        jLabel10.setFont(new java.awt.Font("微软雅黑 Light", 0, 12)); // NOI18N
        jLabel10.setText("RoundEnd:");

        roundStartTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundStartTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(SendTimeData, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SendRandomData)
                        .addGap(18, 18, 18)
                        .addComponent(ReceiveTimeData)
                        .addGap(18, 18, 18)
                        .addComponent(ReceiveRandomData))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(SyncRoundText, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(APD1Delay, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DataProcess)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(APD2Delay, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                            .addComponent(roundStartTxt))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roundEndTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(TimeGate))
                        .addGap(73, 73, 73)
                        .addComponent(TimeSetting)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SendTimeData, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SendRandomData, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ReceiveTimeData, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ReceiveRandomData, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(APD1Delay)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(APD2Delay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TimeGate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(SyncRoundText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(TimeSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10)
                            .addComponent(roundStartTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roundEndTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addComponent(DataProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void APD2DelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_APD2DelayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_APD2DelayActionPerformed

    private void TimeGateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeGateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeGateActionPerformed

    private void SendTimeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendTimeDataActionPerformed
        // TODO add your handling code here:
        JFileChooser SendTimeDataFilechooser = new JFileChooser();
        SendTimeDataFilechooser.setCurrentDirectory(DataFile);
        SendTimeDataFilechooser.setFileFilter(new FileNameExtensionFilter(".dat", FileType));
        SendTimeDataFilechooser.showOpenDialog(null);
        setSendTimeDataFile(SendTimeDataFilechooser.getSelectedFile());
        if (getSendTimeDataFile() != null) {
            System.out.println(getSendTimeDataFile() + "  File read Sucess!");
            ResultPrint.setLineWrap(true);
            ResultPrint.append(getSendTimeDataFile() + "  File read Sucess!" + "\n");
        }
    }//GEN-LAST:event_SendTimeDataActionPerformed

    private void SendRandomDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendRandomDataActionPerformed
        // TODO add your handling code here:
        JFileChooser SendRandomDataFilechooser = new JFileChooser();
        SendRandomDataFilechooser.setCurrentDirectory(DataFile);
        SendRandomDataFilechooser.setFileFilter(new FileNameExtensionFilter(".dat", FileType));
        SendRandomDataFilechooser.showOpenDialog(null);
        setSendRandomDataFile(SendRandomDataFilechooser.getSelectedFile());
        if (getSendRandomDataFile() != null) {
            System.out.println(getSendRandomDataFile() + "  File read Sucess!");
            ResultPrint.append(getSendTimeDataFile() + "  File read Sucess!" + "\n");
        }
    }//GEN-LAST:event_SendRandomDataActionPerformed

    private void ReceiveTimeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveTimeDataActionPerformed
        // TODO add your handling code here:
        JFileChooser ReceiveTimeDataFilechooser = new JFileChooser();
        ReceiveTimeDataFilechooser.setCurrentDirectory(DataFile);
        ReceiveTimeDataFilechooser.setFileFilter(new FileNameExtensionFilter(".dat", FileType));
        ReceiveTimeDataFilechooser.showOpenDialog(null);
        setReceiveTimeDataFile(ReceiveTimeDataFilechooser.getSelectedFile());
        if (getReceiveTimeDataFile() != null) {
            System.out.println(getReceiveTimeDataFile() + "  File read Sucess!");
            ResultPrint.append(getSendTimeDataFile() + "  File read Sucess!" + "\n");
        }
    }//GEN-LAST:event_ReceiveTimeDataActionPerformed

    private void ReceiveRandomDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveRandomDataActionPerformed
        // TODO add your handling code here:
        JFileChooser ReceiveRandomDataFilechooser = new JFileChooser();
        ReceiveRandomDataFilechooser.setCurrentDirectory(DataFile);
        ReceiveRandomDataFilechooser.setFileFilter(new FileNameExtensionFilter(".dat", FileType));
        ReceiveRandomDataFilechooser.showOpenDialog(null);
        setReceiveRandomDataFile(ReceiveRandomDataFilechooser.getSelectedFile());
        if (getReceiveRandomDataFile() != null) {
            System.out.println(getReceiveRandomDataFile() + "  File read Sucess!");
            ResultPrint.append(getSendTimeDataFile() + "  File read Sucess!" + "\n");
        }
    }//GEN-LAST:event_ReceiveRandomDataActionPerformed

    private void APD1DelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_APD1DelayActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_APD1DelayActionPerformed

    private void TimeSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeSettingActionPerformed
        // TODO add your handling code here:

        setAPD1DelayTime(Integer.parseInt(APD1Delay.getText()));
        setAPD2DelayTime(Integer.parseInt(APD2Delay.getText()));
        setGateTime(Integer.parseInt(TimeGate.getText()));
        setSyncRound(Integer.parseInt(SyncRoundText.getText()));
        setGPSStartTime(Integer.parseInt(roundStartTxt.getText()));
        setProcessTime(Integer.parseInt(roundEndTxt.getText()));
        System.out.println("APD1DelayTime: " + getAPD1DelayTime() + "\t" + "APD2DelayTime: " + getAPD2DelayTime() + "\t" + "GateTime: " 
                + getGateTime()+"SyncRound\t" +getSyncRound()+"StartRound\t" +getGPSStartTime()+"EndRound\t" +getProcessTime()+"\n");
        ResultPrint.append("APD1DelayTime: " + getAPD1DelayTime() + "\t" + "APD2DelayTime: " + getAPD2DelayTime() + "\t" + "GateTime: " + getGateTime() +"SyncRound\t" +getSyncRound()+"\n");
    }//GEN-LAST:event_TimeSettingActionPerformed

    private void DataProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataProcessActionPerformed
        // TODO add your handling code here:
        DPSTimeData Process = new DPSTimeData();
        ResultPrint.append("Processing...");
        try {

            Process.TimeData(getSendTimeDataFile(), getReceiveTimeDataFile(), getSendRandomDataFile(), getReceiveRandomDataFile(), getAPD1DelayTime(), getAPD2DelayTime(), getGateTime(), getGPSStartTime(), getProcessTime(),getSyncRound());
        } catch (Exception e) {
        };
    }//GEN-LAST:event_DataProcessActionPerformed

    private void roundStartTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundStartTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roundStartTxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DPSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DPSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DPSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DPSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DPSJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField APD1Delay;
    private javax.swing.JTextField APD2Delay;
    private javax.swing.JButton DataProcess;
    private javax.swing.JButton ReceiveRandomData;
    private javax.swing.JButton ReceiveTimeData;
    private javax.swing.JTextArea ResultPrint;
    private javax.swing.JButton SendRandomData;
    private javax.swing.JButton SendTimeData;
    private javax.swing.JTextField SyncRoundText;
    private javax.swing.JTextField TimeGate;
    private javax.swing.JButton TimeSetting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField roundEndTxt;
    private javax.swing.JTextField roundStartTxt;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the SendTimeDataFile
     */
    public File getSendTimeDataFile() {
        return SendTimeDataFile;
    }

    /**
     * @param SendTimeDataFile the SendTimeDataFile to set
     */
    public void setSendTimeDataFile(File SendTimeDataFile) {
        this.SendTimeDataFile = SendTimeDataFile;
    }

    /**
     * @return the ReceiveTimeDataFile
     */
    public File getReceiveTimeDataFile() {
        return ReceiveTimeDataFile;
    }

    /**
     * @param ReceiveTimeDataFile the ReceiveTimeDataFile to set
     */
    public void setReceiveTimeDataFile(File ReceiveTimeDataFile) {
        this.ReceiveTimeDataFile = ReceiveTimeDataFile;
    }

    /**
     * @return the SendRandomDataFile
     */
    public File getSendRandomDataFile() {
        return SendRandomDataFile;
    }

    /**
     * @param SendRandomDataFile the SendRandomDataFile to set
     */
    public void setSendRandomDataFile(File SendRandomDataFile) {
        this.SendRandomDataFile = SendRandomDataFile;
    }

    /**
     * @return the ReceiveRandomDataFile
     */
    public File getReceiveRandomDataFile() {
        return ReceiveRandomDataFile;
    }

    /**
     * @param ReceiveRandomDataFile the ReceiveRandomDataFile to set
     */
    public void setReceiveRandomDataFile(File ReceiveRandomDataFile) {
        this.ReceiveRandomDataFile = ReceiveRandomDataFile;
    }
}
